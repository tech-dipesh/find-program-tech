first i start with package start.
npm i -D nodemon (the -d mean it only worked for the development side, now it will not go for the production stage.)

for the project the mvp features are:
login/signup with the authentication
when use signup for the first time, it should have the following things: Full Name/Company Name, Email, Password, Username
Login: Email and Password
listing the new developer site: in listing first developer tool name, when it was released, the logo of that tool, use case (less than 10 words), descriptive information, which tech stack, tags..
Navbar and footer: it have the template of footer and navbar. 

Search filters: in the top of the page, user can search the listing, with it will be rerending each time when the input value is changed, and based on the input value it wil show the output in the card format. (with the shortcut of control k user can search the any listing), 
Tech Stack subheading: it will have the subheading, where user can go to any see the subheading of that particular listing
Upvote feature: User can upvote or downvote any listing with both on when they search with filter, they can downvote and upvote
any developer Descriptio:user cann go to any listning,, and in there it will have the desriptive information of that tool, with with website url, tags, comments section and show all coments sections, 
while showing any listing description when user click on that listing: it will show the following thing with the designalbe way: 
Database:1.  User login and signup Database 2. Listing of the developer tool 3. Like & Dislike 4. Comment

Schema: 
1. first schema woulld be user login and signup with only correct information user can loggin and signup.
2. second schema is when user enter a any new listings: it should follow all of teh listing things: the title can only be the string, the devellper release year only can be low of 1950 and high of 2025 (in the else block it will shwo the flash error of year only can be the year from 1950 to 2025, the logo of the tool: the logo would be in image format, i will connect to the multer and cloudinary to accept that image format. desvritive information: it should have more than 50 charac length and 250 characters less than length. tech stack would be select option form, with the options are: Mern, Frontend, backend, Devops, Machine learning, cyber security, artficial intelligence, open source, data analysis, data science, robotics engineer)

Error:
for catching the every kind of error on every block i will use the try and catch block if the data is coming from the database or any kind of external sources i will use async and await function for faster response our response. for showing the every kind of block the minor block i will show with the connect flash dependency. if the major error occured i will show th 404 page not found error. (like sometimes user might go to url that doesn't exist).

before user can pass the any security measurement, i will pass with eery code function block with the middleware function. 

Frontend:
Homepage: Top Developer Tools, Search the tools (it will redirectered to the search), See all of the listings (the listings would be the based on the alphabetical order), user also can filter with popular or alphabetical. 
Content: it will show the content of our website, call to action where we tell a user to submit a developer tools, a background image for graphic of my project
success stories: below content it will have some quotes and user testimonial, of what user it says.
Join our community: My Discord community 
Upcoming features: 
Profile edit

Privacy:
Password: for making a password protected i will do hashing and salting before storing on database, and other feature such as 
i will use the passport.js for authenticaton.
so with the new version now it will not require the cookie-parser as now express session will comes with cookie-parser. 

Access:
with the user havinng the same username and created user usernmae is same that partiucular user can perform the edit/update and delete operation, otherwise other user of random user can't delete that particular listing, before performing that task i will ask the user to if they confirm that operation, with teh window.confirm(). 
for commenting user should have the logged in before commenting, and after user commenting i will redirecterd them wheere they left rather then on the homepage. also on comments it will show the username of what username that person comments. if that commenting person username and session username is matched then that particular username can able to delete that comments. 

Connecting backend to frontend integration:
connect the nodejs and express routes to the react components. 

Deployment:
i will render the at right now with the vercel for Frontend and backend for the render, if i get any beter tool i can switch that. i will test with multiple times before launching it. 


The process i have done is set up the joi, then i import on the app.js, now i will set up the mongodburl
the next process is to make the ejs file and pass the backend to cients side. when i set the env file, i have to to require the env file with require("dotenv").config(). When you use dotenv, you need to call its .config() method to load the variables from the .env file
the one things, is i have to associated the every data to associated with the id.
the error i have catched is use the same name consistently.
app.use is the method to pass the middleware before doing any operation of it. i have used the helmet for securign a express. it secures the http request.
i have add the new keywrod on expressError class every time. in the expressError class we must use new keyword before it. 
now i think i finisdhe the frontend today 3/15 with only using the react and tailwindcss. i have to download react-router-dom. 

i addded teh custom frontend error handling on the tailwind form. 
for the backend: i can't talk the frontend to backend,  you'll encounter Cross-Origin Resource Sharing (CORS) issues for solving that i have to use cors and pass middleware, without cors method will be blocked for security reason.
in mongodb, it create automatically the collections. in my airbnb project ist calls on the middleware fo app.use pasing the next() so i also passed that: app.use((req, res, next)=>{
  let newData=req.newtools
  next();
})
#if we just npm create vite@latest . (it will directly created the vite folder with root directory)
we can use like: axios/http (to send the request but most of the are using the axios ) while connecting the backend to frontend it is important to note that we have to use the proxy. while setting up the proxy in the vite.config.js the frontend file. we have to set the : server:{proxy:{"/api": 'http:localhost:4000"},} (now when there is the request coming on teh localhost:4000 comes the request it will automatically append to ). i have to give the module.export to router to use those router. when we try to access it, the same route take the longer route first so it gets the priority : like first use the :id/edit rather than first :id. 
the error i have done it using the app.use method. 
# When you pass data to res.render(), the second argument must be an object. This is how EJS (and most templating engines) are designed to work.
then the dummy data i added that, and setup the index.js which first i setup the mongoose and then i require that data create one function, in that function i insert the new data, const addData=async ()=>{
  await modelListing(dataIndex.data);
}
addData() (with the asynchrounous of where i have to add the data and call that fucntion. Inserts one or more new documents as a single insertMany call to the MongoDB server.)
i fixed the 3 problem: one is reference error is not defined which i solved with the require mongoose and the nex tis ObjectId is not  a constructor whichi is the type error it should be capita: ObjectId not small .  and the last error is data is not iterable. 

when we want to group everything on the single : If your Mongoose schema expects the data to be nested under a specific key (e.g., newTool), you need to use the newTool[fieldName] naming convention in your form.

This is common when you're working with complex schemas or when you want to group related fields together.
other wise we can use the simple:       <input type="text" placeholder="Please enter your name" name="Name">
@the error is says that tools is not defined so i fix with the post route should have the res.redirect rather than res.render that fix the error. so when we do the post/put/delete route res.redirect is the best approach when we do any operation. 
#the actions method that we used on form is where we will send the data not a where we will redirect.
#the another error is when ig give the href i forget to addd the tools which is causing the error.
as we can't directly use the put method for using the we have to use the method-override with npm and the  use on method is post and action is: <form action="/tools/<%=tools._id%>?_method=PUT" method="POST">
@the error i have solved is that: in the form method is should be:       <form action="/tools/<%=tools._id%>/edit?_method=PUT" method="POST"> (add the edit on last which solved the errro.)
@the error is capital on method: You can use lowercase (post), and it will work in HTML. However, uppercase (POST) is preferred as a matter of convention, readability, and to avoid potential issues with third-party tools or middleware that might expect uppercase HTTP methods.
i have used the express-validator librarry for validating any new listings. #when i work on express-validator making code on outside of trcatch block rather than inside the block, cause if that conditon matched our logic for saving those files will not be executed.
so i have already used the joi schema i don't need to use teh experss-validator as of now. 
while working on middleware: Middleware executes in the order they're listed. Always structure them as:
Validation → Authorization → Final Handler.
i first install the express-session for using the conect-flash. for using the session we have to defien teh ersave, saveUnitialized and req.option for using it. The default value is true, but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case. Typically, you'll want false.
#i add the find method when there is new listing on both, but it is not required only on get method, can be sufficient of showdin the find method of showing all of the listings.     // const tools=await modelListing.find({});
#i understand one thing, when do the post operation in when we redirect caues onl redirect work on there the redirect should be the routes not the ejs file like this:     res.redirect("/tools");
the error i have faced is:first it should come the app.use all of the middleware then it can only comes other middleware such as: route middleware. 

no i already have setup the login and signup and now i will setup the passport.js for hashing. so i have ref add refereing another part but we also have to use the populate method for refernceing. 

#when i try to implement the passport.js npm i am facing this error: Error: Route.get() requires a callback function but got a [object Object]. so the main cuased for this is we have importing without destrucutre , Why? Because without destructuring, you’re importing the whole module.exports object, and that’s why you're getting [object Object] instead of the isLoggedIn function.
@the error i am facing is that, which cause me from 3 days, on the showPost i passsed teh userName with incorrect way, also on the model i have to pass on string rather than giving reference.
#also i implement the one logic, like in the res.locals.error=req.user then i also pass the user session so i can use whenver i need.
@The error i am facing of like and dislike is nto working properly, which seems working i think it dues to incorrect imporitng and schema exports defination.

I have used the passport-local and local-mongoose first i require and pass before middleware like thi: app.use passport.intiliaze and passport session and authenticate. and then i just have to pass on the model with the plugin what i need the hashing and salting before module.exports. then i just have to use on teh signupPost route, with like this:     const newuser = signupListing.register(yourName, Email, PassWord, userName); (like passing all value with register which data are exist.) it will be just after the create process. 
#so on the traditional method creating any databse we simpluy use the signup.create but ont eh other hand passport-local we can simply use the signup.register (register keyword i can use with the hashed password also don't forget to add the password keyword or password name or pass ont he register value separately so it can be salted or hashed.)


Frontend:
Now i will validate the form with multiple values with the react-hook-form. and also i have used lucide-react for the icon importing.
now i finally add the validation form with first i import a lucide-react and create a separate comps, where i put a tailwind and after that, the firstError only catch the one error at the time   const firstError = Object.values(errors)[0]; (and just pass the errors with like this:)   {...register("oneLine",
{ required: { value: true, message: "Please write the Use Case" } })} (it will print there.)

i have changed the logo of frontend, Then i use the browserRoute and Routes and routes to navigate betweent the routes.
<Route path="*" element={<NoUrl />} /> (with this it will only catcth those url who doesn't exist.)
    <Route path="tools">
          <Route index element={<Show />} />
          <Route path="new" element={<Newlisting />} />
          <Route path="random" element={<Showindividual />} />
        </Route> (it will be teh nested url.)


# Thank god i finally connected the backend to frontend, first step that i have done is on the backend is install the cors and setup the cors:
frontend/app.js:
 app.use(cors({
  origin: 'http://localhost:5173', // Your React port
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE']
})); (in here i pased teh cors, with the origin mean teh address of the frontend, and the method that i will perform is get, post , put and delete method. )
(in here why does it need to use teh credentials to true allows cookies for auth header for the express and authentication it is need to use it. )

Then the next steps i have done is, app.use((req, res, next) => {
  res.locals.currentUser = req.user;
  res.header("Access-Control-Allow-Headers", "Content-Type");
  next();
}); (in here i pass on the header, )
The res.header is not mandatory to use when conncting to frontend to backend. so it helps us : Adds X-Custom-Header: HelloFromServer to every response
it will be no impact when we don't use it it just missing the header nothing else. the cors header is mainly critical for security propose. we can add the:
Adds X-Custom-Header: HelloFromServer (if we want for every server.)
WE can use the multiple headers, 

Use case: Useful for tracking requests in network analysis
 res.header("Access-Control-Allow-Origin", "http://localhost:5173");
  res.header("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE");
  res.header("Access-Control-Allow-Headers", "Content-Type, Authorization");
  res.header("Access-Control-Allow-Credentials", "true"); (we can use this manly but we can only simple use the conterrol allow headers, so other is not that mandatory.)

frontend/controller.js:
res.json(success:true, tools); (in here the success message is standard practice for the response, if we don't use the success the success and failure message can't show. )

backend/api.jsx:
const API = axios.create({
  baseURL: 'http://localhost:5000',
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});
when we use the withCredentials can send the cookies and authentication header to frontend from the backend.
so in the headers file it mean the what format of data is sending in here it is sending the data in the form of json and accepting/recieve in also on the form of json format. if we don't use it sever might not parse the send data and also on the accept maybe it can recieve unexcpeted data. 
 so we can export individual pattern that we can use on other value:  export const getAllItems = () => API.get('/tools');
export default API; (make sure to use the api in uppercase for better convention. )

backend/app.jsx:
first we need to setup the axios on app.jsx


#
Real-World Scenario
Without proper CORS/headers setup:
Frontend makes request to backend
Browser blocks request due to CORS policy
Even if response comes through, cookies/sessions won't work
Server might reject requests with JSON data




The other error i am facing is that when try to fetch the individual listing i need to fetch id as a :id on the app.jsx of Route.
 const { id } = useParams();
  const [show, setshow] = useState(null);

  useEffect(() => {
    const fetchTool = async () => {
      try {
        const response = await getItemById(id);
        setshow(response.data);
      } catch (error) {
        console.error('Error fetching tool:', error);
      }
    };
    fetchTool();
  }, [id]);
(we also have to pass teh id so we can identify the individual items, and then we can pass the useState with the show and setShow, we have to psas the useEffect with the try andn catch block teh getitemebyid is coming from the api, and in the end we should call the ofetch tool and pass the id.)
common beginner mistake made is:
const id = props.match.params.id; // Old class component way
// CORRECT ✅ Functional component way
const { id } = useParams();  (they trying to access the id with params.id which is class component way rather then we can use the useParams for the functional component way)
// WRONG ❌
useEffect(() => { ... }, []); // Empty array = runs only once
// CORRECT ✅
useEffect(() => { ... }, [id]);  (we have to rerun each time if id is changed so at that time we need to pass the id which is necessery.)


##on the useEffect of Showindividual i am not able to understand that code, i need revision of that code.

value: /^[a-z0-9_-]+$/, (it should be the followgin regex pattern as this is for the userName).

Now i am able to save data on the backend:   const onSubmit = async (newUser) => {
    console.log(newUser);
    try {
      let signupData=await axios.post(("http://localhost:5000/signup"), newUser, {
        headers:{
          "Content-Type": "application/json"
        },
        withCredentials: true
      })
    } catch (error) {
      console.error("Eror on the signup onSubmit function and the error is:", error)
    }
  } (in here i passed the variable, with content-type should send the data in the form of json )
the withCredentials is determined whether your browser will send teh cookie or not.
##so i have to navigate the user to homepage after the login, so i use the usenaviagate of react-router-dom.
i have used the react-router-dom which have the benefits of: React Router DOM allows your React application to display different components based on the URL without reloading the entire page. It essentially gives your single-page application (SPA) the ability to navigate between different views while maintaining state.
so while i trying to setup the login configuration:
i face the several error: the tool i have used is, useNavigate from teh react-router-dom, which i used for the navigate a page when user put successfull details while signup, then i catch the error on catch block with error.response the response is the function name, and i show the console message at there, all of the functionality is working on backend. with the check condition of username and password. 

as for the useEffect while extracting the id from the useParams as useparams is a function react-router-dom which we importing, as we need to call a useParams, useParams().
also on the axios.post(`http:localhost:5000/tools/${id}/comment`) (it should be the {id} not {:id} as it doesn't need to fetch at a id with req.params.id)

i've implement the comment listing in any individual tool, which i have done with two axios.post and axios.get method on axios.get i only find all of the userName that matched and with useState show all of the listings. on the other hand, post method is first check the constraint is that matche or not both client side and server side and then after that it will save on teh inside the same userName with that userName, with the best possible way.
  
